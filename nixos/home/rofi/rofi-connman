#!/usr/bin/env sh
#             __ _
#  _ __ ___  / _(_)       ___ ___  _ __  _ __  _ __ ___   __ _ _ __
# | '__/ _ \| |_| |_____ / __/ _ \| '_ \| '_ \| '_ ` _ \ / _` | '_ \
# | | | (_) |  _| |_____| (_| (_) | | | | | | | | | | | | (_| | | | |
# |_|  \___/|_| |_|      \___\___/|_| |_|_| |_|_| |_| |_|\__,_|_| |_|
#
# Author: Vlad Glagolev
#
# A script that generates a rofi menu that uses connmanctl to
# connect to network services and display status info.
#
# Inspired by:
# - rofi-bluetooth (https://github.com/nickclyde/rofi-bluetooth)
# - connman_dmenu (https://github.com/march-linux/connman_dmenu)
# - networkmanager-dmenu (https://github.com/firecat53/networkmanager-dmenu)
#
# Depends on:
# - rofi or dmenu
# - connman (contains connmanctl)
# - empty or sexpect
#
# Utilities:
# - awk
# - expr

# ----------+
# Constants |

version="0.6-dev"

divider="──────────────────"
scan="Rescan"
goback="Back"
exit="Exit"

readonly scan_result="/tmp/connman.scan"

# ---------+
# Commands |

# primary menu command
rofi=${ROFI_COMMAND:-"rofi -dmenu -no-fixed-num-lines -no-custom -yoffset -100 -i -p"}
# regular prompt
rofi_prompt=${ROFI_PROMPT_COMMAND:-"rofi -dmenu -l 0 -p"}
# password prompt
pin_prompt=${PIN_PROMPT_COMMAND:-"rofi -dmenu -l 0 -password -p"}

# ----------+
# Utilities |

check_utilities() {
  # awk
  if type mawk >/dev/null 2>&1; then
    awk="mawk"
  elif type gawk >/dev/null 2>&1; then
    awk="gawk"
  else
    rofi_notify "Neither mawk(1) nor gawk(1) was found"

    exit 1
  fi
  # expect
  if type sexpect >/dev/null 2>&1; then
    service_connect_advanced() { service_connect_sexpect "$@"; }
  elif type empty >/dev/null 2>&1; then
    service_connect_advanced() { service_connect_empty "$@"; }
  else
    rofi_notify "Neither empty(1) nor sexpect(1) was found"

    exit 1
  fi
}

# -----------------+
# Helper functions |

# $1 = msg
rofi_notify() {
  : | $rofi_prompt "$1 (press Enter)"
}

# $1 = index
index_to_name() {
  [ -f "$scan_result" ] || return 1

  $awk -v line="$1" 'NR == line { print $2 }' "$scan_result"
}

# $1 = index
index_to_service() {
  [ -f "$scan_result" ] || return 1

  $awk -v line="$1" 'NR == line { print $3 }' "$scan_result"
}

# $1 = service id
get_service_security() {
  printf "$1" | cut -d _ -f 5
}

# $1 = service id
get_service_signal() {
  get_service_info "$1" "Strength"
}

# $1 = service id
get_service_state() {
  get_service_info "$1" "State"
}

# $1 = service id
get_service_autoconnect() {
  get_service_info "$1" "AutoConnect"
}

# $1 = service id
get_service_favorite() {
  get_service_info "$1" "Favorite"
}

# $1 = service id
get_service_name() {
  get_service_info "$1" "Name"
}

# $1 = service id, $2 = field
get_service_info() {
  connmanctl services "$1" | $awk -v field="$2" '$1 == field { $1 = $2 = ""; sub(/^[ ]+/, "", $0); print field == "Name" ? $0 : $1 }'
}

# $1 = service id
get_service_iface() {
  connmanctl services "$1" | $awk '$1 == "Ethernet" { match($0, /Interface=([^, ]+)/); print substr($0, RSTART + 10, RLENGTH - 10) }'
}

# $1 = service id
get_service_priority() {
  connmanctl services | $awk -v service="$1" '
substr($0, 0, 3) ~ /[RO]/ {
    count++
    if ($NF == service) {
      found=count
    }
} END {
    if (found == 1) {
        priority="top"
    } else if (found == count) {
        priority="bottom"
    } else if (1 < found && found < count) {
        priority="middle"
    }

    print priority
}'
}

get_services() {
  [ -f "$scan_result" ] || return 1

  local order=1
  local name
  local service_id
  local security
  local signal
  local online
  local autoconnect

  while read -r flags name service_id; do
    security=''
    signal=''
    online=''

    case "$flags" in
      *[RO]*)
        online="(online)"
      ;;
    esac

    case "$flags" in
      *[A]*)
        online="${online} *"
      ;;
    esac

    case "$service_id" in
      wifi_*)
        security="$(get_service_security "$service_id")"
        signal="$(get_service_signal "$service_id")"
      ;;
      vpn_*)
        security='vpn'
      ;;
      ethernet_*)
        name="${name}:$(get_service_iface "$service_id")"
      ;;
    esac

    printf '%2s  %-25s%5s %-3s %s\n' "$order" "$name" "$security" "$signal" "$online"

    order=$(( order + 1 ))
  done < "$scan_result"
}

# Checks if wifi technology is powered on
power_on() {
  if [ "$(connmanctl technologies | $awk '/Type = wifi/ { getline; print $3 }')" = "True" ]; then
    return 0
  else
    return 1
  fi
}

# Toggles power state
toggle_power() {
  if power_on; then
    connmanctl disable wifi
  else
    connmanctl enable wifi
  fi

  [ "$1" = "quiet" ] || show_menu
}

# Perform a scan
rescan() {
  connmanctl scan wifi &
  printf "Scanning...\n"
  sleep 5
  show_menu
}

# Parse services
parse_services() {
  if [ -f "$scan_result" ]; then
    rofi_notify 'another rofi-connman is running'

    exit 1
  fi

  trap "rm -f $scan_result" EXIT

  refresh_services
}

# Refresh services
refresh_services() {
  connmanctl services | $awk '
{
    flags = substr($0, 1, 3)
    gsub(/[ \t]/, "-", flags)
    name = service_id = $NF
    if (!sub(/^wifi_[0-9a-f]+_/, "", name) || name !~ /^hidden_/) {
        name = substr($0, 5, length - length($NF) - 5)
        sub(/[ \t]+$/, "", name)
        gsub(/[^a-zA-Z0-9-]/, "_", name)
    }
    print flags, name, service_id
}' > "$scan_result"
}

# Checks if a service is insecure
insecure_on() {
  if [ "$(get_service_security "$service")" = "none" ]; then
    return 0
  else
    return 1
  fi
}

# Checks if a service is autoconnected
autoconnect_on() {
  if [ $(get_service_autoconnect "$service") = "True" ]; then
    printf "Autoconnect: on\n"

    return 0
  else
    printf "Autoconnect: off\n"

    return 1
  fi
}

# Toggles Autoconnect
toggle_autoconnect() {
  if autoconnect_on; then
    autoconnect="no"
  else
    autoconnect="yes"
  fi

  connmanctl config "$service" --autoconnect "$autoconnect"

  service_menu "$service"
}

# Checks if a service is in favorites
favorite_on() {
  if [ "$(get_service_favorite "$service")" = "True" ]; then
    printf "Favorite: yes\n"

    return 0
  else
    printf "Favorite: no\n"

    return 1
  fi
}

# Removes a service, noop otherwise
toggle_favorite() {
  if favorite_on; then
    connmanctl config "$service" --remove
  fi

  service_menu "$service"
}

# Checks if a service is hidden
hidden_on() {
  if [ -z "$(get_service_name "$service")" ]; then
    return 0
  else
    return 1
  fi
}

# Returns service priority
priority() {
  priority="$(get_service_priority "$service")"

  if [ -z "$priority" ]; then
    printf "Priority: none\n"

    return 1
  else
    printf "Priority: ${priority}\n"

    return 0
  fi
}

# Switches service priority
switch_priority() {
  connmanctl services | $awk -v direction="$1" -v service="$service" '
substr($0, 0, 3) ~ /[RO]/ && $NF == service {
    prev=$NF; getline; top=(last ? last : prev); bottom=(substr($0, 0, 3) ~ /[RO]/ ? $NF : prev)
} {
    last=$NF
} END {
    if (direction == "up") {
        s=top; m="before"
    } else {
        s=bottom; m="after"
    }
    if (s != service) {
        system("connmanctl move-" m " " service " " s)
    }
}'

  priority_menu "$service"
}

# Service connection
service_connect() {
  if favorite_on || (insecure_on && ! hidden_on); then
    connmanctl connect "$service"
  else
    service_connect_advanced "$service"
    # wrong password
    [ $? -eq 2 ] && rofi_notify "Wrong password"
  fi
}

# Service connection (advanced:empty)
service_connect_empty() {
  printf "Using empty...\n"

  empty -f connmanctl

  sleep 1

  empty -s "agent on\n"
  empty -w "Agent registered" "connect ${service}\n"

  rc=$?

  if hidden_on; then
    empty_check $rc 1 && empty -w "Hidden SSID name\?"

    if empty_check $? 1; then
      ssid=$($rofi_prompt "SSID")

      rcp=$?

      empty_check $rcp 0 || return 1

      printf "${ssid}\n" | empty -s
    else
      return 1
    fi

    if ! insecure_on; then
      empty_check $rcp 0 && empty -w "Passphrase\?"

      rc=$?
    else
      rc=1
    fi
  else
    empty_check $rc 1 && empty -w "Passphrase\?"

    rc=$?
  fi

  if ! insecure_on; then
    if empty_check $rc 1; then
      pin=$($pin_prompt "Password")

      empty_check $? 0 || return 1

      printf "${pin}\n" | empty -s
    else
      return 1
    fi
  fi

  # wait until connman processes the command to grab all output
  sleep 10

  out="$(empty -r -t 5)"

  empty_check $? 0 || return 1

  case "$out" in
    *Connected*)
      rc=0

      empty -s "quit\n"
    ;;
    *Passphrase\ required*)
      rc=2
    ;;
    *)
      rc=1

      case "$out" in
        *Passphrase\?*)
          printf "${pin}\n" | empty -s

          empty -w "Connected ${service}"

          empty_check $? 1

          rc=$?

          empty -s "quit\n"
        ;;
      esac
    ;;
  esac

  empty_check $rc 0

  return $rc
}

empty_check() {
  if [ $1 -eq $2 ]; then
    return 0
  else
    if [ $2 -eq 0 ]; then
      printf "Cancelled\n" >&2
    else
      printf "Error while communicating to connman\n" >&2
    fi

    empty -k && return 1
  fi
}

# Service connection (advanced:sexpect)
service_connect_sexpect() {
  printf "Using sexpect...\n"

  export SEXPECT_SOCKFILE="$(sexpect_sockfile)"

  sexpect spawn -idle 60 -t 5 -autowait connmanctl

  sleep 1

  sexpect_send "agent on"
  sexpect_expect "Agent registered"

  rc=$?

  sexpect_check $rc 0 || return 1

  sexpect_send "connect ${service}"

  if hidden_on; then
    sexpect_expect "Hidden SSID name?"

    if sexpect_check $? 0; then
      ssid="$($rofi_prompt "SSID")"

      rcp=$?

      sexpect_check $rcp 0 || return 1

      sexpect_send "$ssid"
    else
      return 1
    fi

    if ! insecure_on; then
      sexpect_check $rcp 0 && sexpect_expect "Passphrase?"

      rc=$?
    else
      rc=0
    fi
  else
    sexpect_check $rc 0 && sexpect_expect "Passphrase?"

    rc=$?
  fi

  if ! insecure_on; then
    if sexpect_check $rc 0; then
      pin=$($pin_prompt "Password")

      sexpect_check $? 0 || return 1

      sexpect_send "$pin"
    else
      return 1
    fi
  fi

  # wait until connman processes the command to grab all output
  sleep 10

  sexpect_expect -a

  sexpect_check $? 0 || return 1

  out="$(sexpect expect_out)"

  case "$out" in
    *Connected*)
      rc=0

      sexpect_send "quit"
    ;;
    *Passphrase\ required*)
      rc=2
    ;;
    *)
      rc=1

      case "$out" in
        *Passphrase\?*)
          sexpect_send "$pin"

          sexpect_expect "Connected ${service}"

          sexpect_check $? 0

          rc=$?

          sexpect_send "quit"
        ;;
      esac
    ;;
  esac

  sexpect_check $rc 0

  return $rc
}

sexpect_send() {
  export SEXPECT_SEND="$1"

  sexpect send -cr -env SEXPECT_SEND
}

sexpect_expect() {
  if [ "$1" = "-a" ]; then
    exact=""

    shift
  else
    exact="-exact"
  fi

  sexpect expect $exact "$@" > /dev/null
}

sexpect_check() {
  if [ $1 -eq $2 ]; then
    return 0
  else
    if [ $1 -eq 1 -o $1 -eq 2 ]; then
      printf "Cancelled\n" >&2
    else
      printf "Error while communicating to connman\n" >&2
    fi

    sexpect kill && return 1
  fi
}

sexpect_sockfile() {
  $awk -v min=1 -v max=1000 'BEGIN { srand(); printf "/tmp/sexpect-connman-%d.sock", int(min + rand() * (max - min + 1)) }'
}

# Checks if a service is connected
service_connected() {
  case "$(get_service_state "$service")" in
    online|ready)
      return 0
    ;;
    *)
      return 1
    ;;
  esac
}

# Toggles service connection
toggle_connection() {
  if service_connected "$service"; then
    connmanctl disconnect "$service"

    service_menu "$service"
  else
    service_connect "$service"

    if hidden_on; then
      show_menu
    else
      service_menu "$service"
    fi
  fi
}

# Prints a short string with the current connection status
# Useful for status bars like polybar, etc.
print_status() {
  icon=""

  if power_on; then
    status=$(connmanctl services | $awk '
{
    flags = substr($0, 0, 3)
    sub(/^..../, "", $0)
} flags ~ /[OR]/ {
    split($NF, sec, "_")
    if (NR > 1) {
        printf ", "
    }
    s = substr($0, 0, length - length($NF))
    sub(/^[ \t]+|[ \t]+$/, "", s)
    if (sec[1] == "ethernet") {
      cmd="connmanctl services " $NF

      while (cmd | getline) { if ($1 == "Ethernet") { match($0, /Interface=([^, ]+)/); printf "%s (%s:%s)", s, sec[1], substr($0, RSTART + 10, RLENGTH - 10) } }
    } else {
      printf "%s (%s)", s, sec[1]
    }
} END {
    printf ""
}'
)

    # colorize icon
    expr "$status" : '.*(vpn)' > /dev/null && icon="" icon="%{F#55aa55}${icon}%{F-}"
  else
    icon="%{F#555}${icon}%{F-}"
  fi

  printf "%s\n" "${icon} ${status}"
}

# A submenu for priority change
priority_menu() {
  service="$1"

  up="Up"
  down="Down"

  # Get service name
  service_name="$(get_service_name "$service")"

  # Get service priority
  priority="$(priority)"

  if [ $? -ne 0 ]; then
    options=""
  else
    options="${up}\n${down}\n"
  fi

  options="${options}${divider}\n${goback}\n${exit}"

  # Open rofi menu, read chosen option
  chosen="$(printf "%b" "$options" | $rofi "$service_name")"

  # Match chosen option to command
  case "$chosen" in
    "" | $divider)
      printf "No option chosen.\n"
    ;;
    $up)
      switch_priority up
    ;;
    $down)
      switch_priority down
    ;;
    $goback)
      service_menu "$service"
    ;;
  esac
}

# A submenu for a specific service
service_menu() {
  service="$1"

  # Get service name
  service_name="$(get_service_name "$service")"

  hidden_on && service_name="(hidden)"

  # Build options
  if service_connected "$service"; then
    connected="Connected: yes"
  else
    connected="Connected: no"
  fi

  autoconnect="$(autoconnect_on)"
  favorite="$(favorite_on)"
  priority="$(priority)"

  options="${connected}\n${autoconnect}\n${favorite}\n${priority}\n${divider}\n${goback}\n${exit}"

  # Open rofi menu, read chosen option
  chosen="$(printf "%b" "$options" | $rofi "$service_name")"

  # Match chosen option to command
  case "$chosen" in
    "" | $divider)
      printf "No option chosen.\n"
    ;;
    $connected)
      toggle_connection "$service"
    ;;
    $autoconnect)
      toggle_autoconnect "$service"
    ;;
    $favorite)
      toggle_favorite
    ;;
    $priority)
      priority_menu "$service"
    ;;
    $goback)
      show_menu
    ;;
  esac
}

# Opens a rofi menu with current network status and options to connect
show_menu() {
  refresh_services

  # Get menu options
  if power_on; then
    power="Power: on"

    # Human-readable names of services, one per line
    services="$(get_services)"

    # Options passed to rofi
    options="${services}\n${divider}\n${power}\n${scan}\n${exit}"
  else
    power="Power: off"

    options="${power}\n${exit}"
  fi

  # Open rofi menu, read chosen option
  chosen="$(printf "%b" "$options" | $rofi "󰤨 ")"

  # Match chosen option to command
  case "$chosen" in
    "" | $divider)
      printf "No option chosen.\n"
    ;;
    $power)
      toggle_power
    ;;
    $scan)
      rescan
    ;;
    $exit)
      :
    ;;
    *)
      index=$(printf "$chosen" | $awk '{ print $1 }')
      service="$(index_to_service $index)"
      name="$(index_to_name $index)"

      if expr "$(connmanctl services "$service")" : "/net/connman/service/${service}" > /dev/null; then
        # Open a submenu if a service is selected
        service_menu "$service"
      else
        rofi_notify "Service ${name} is not available"

        show_menu
      fi
    ;;
  esac
}

main() {

  case "$1" in
    --status)
      print_status
    ;;
    --toggle)
      toggle_power quiet
    ;;
    --version)
      printf "%s %s\n" $(basename $0) $version
    ;;
    *)
      parse_services

      show_menu
    ;;
  esac
}

check_utilities

main "$@"
